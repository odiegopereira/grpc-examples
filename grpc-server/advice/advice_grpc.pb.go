// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: advice/advice.proto

package advice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdviceClient is the client API for Advice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdviceClient interface {
	GetAdvice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdviceMessage, error)
}

type adviceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdviceClient(cc grpc.ClientConnInterface) AdviceClient {
	return &adviceClient{cc}
}

func (c *adviceClient) GetAdvice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdviceMessage, error) {
	out := new(AdviceMessage)
	err := c.cc.Invoke(ctx, "/advice.Advice/GetAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdviceServer is the server API for Advice service.
// All implementations must embed UnimplementedAdviceServer
// for forward compatibility
type AdviceServer interface {
	GetAdvice(context.Context, *Empty) (*AdviceMessage, error)
	mustEmbedUnimplementedAdviceServer()
}

// UnimplementedAdviceServer must be embedded to have forward compatible implementations.
type UnimplementedAdviceServer struct {
}

func (UnimplementedAdviceServer) GetAdvice(context.Context, *Empty) (*AdviceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvice not implemented")
}
func (UnimplementedAdviceServer) mustEmbedUnimplementedAdviceServer() {}

// UnsafeAdviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdviceServer will
// result in compilation errors.
type UnsafeAdviceServer interface {
	mustEmbedUnimplementedAdviceServer()
}

func RegisterAdviceServer(s grpc.ServiceRegistrar, srv AdviceServer) {
	s.RegisterService(&Advice_ServiceDesc, srv)
}

func _Advice_GetAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdviceServer).GetAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/advice.Advice/GetAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdviceServer).GetAdvice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Advice_ServiceDesc is the grpc.ServiceDesc for Advice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Advice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "advice.Advice",
	HandlerType: (*AdviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdvice",
			Handler:    _Advice_GetAdvice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advice/advice.proto",
}
